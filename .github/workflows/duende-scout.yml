name: Generador de Estrategias de B√∫squeda (Ojeador)

on:
  schedule:
    # Se ejecuta todos los d√≠as a las 5:00 AM UTC
    - cron: '0 5 * * *'
  workflow_dispatch: # Permite ejecutarlo manualmente desde GitHub

jobs:
  generate-search-strategy:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Llamar al endpoint del Estratega y guardar las consultas
        id: get_queries
        run: |
          # Usamos -w para escribir el c√≥digo de estado HTTP en stdout y lo capturamos
          HTTP_CODE=$(curl -s -L -w '%{http_code}' -o search_queries.json "${{ secrets.VERCEL_URL }}/api/orchestrator")
          echo "C√≥digo de estado HTTP recibido: $HTTP_CODE"

          # Comprobamos si el c√≥digo de estado NO es de √©xito (fuera del rango 200-299)
          if [[ "$HTTP_CODE" -lt 200 || "$HTTP_CODE" -ge 300 ]]; then
            echo "curl fall√≥ con el c√≥digo de estado: $HTTP_CODE"
            echo "curl_failed=true" >> $GITHUB_ENV
          fi

      - name: 2. Formatear consultas para el cuerpo del Issue
        id: format_body
        run: |
          # Si el curl fall√≥, no continuamos
          if [ "${{ env.curl_failed }}" == "true" ]; then
            echo "La llamada con curl fall√≥. La API devolvi√≥ un c√≥digo de error HTTP."
            echo "jq_success=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Si el fichero est√° vac√≠o (p.ej. respuesta 204), lo consideramos un caso a revisar, pero no un error de JQ.
          if [ ! -s search_queries.json ]; then
            echo "El fichero de queries est√° vac√≠o (posiblemente una respuesta 204 de la API)."
            # Decidimos si esto es un fallo o no. Por ahora, lo tratamos como un caso sin queries.
            # Para que el workflow no falle, salimos con √©xito pero sin crear issue.
            echo "jq_success=false" >> $GITHUB_OUTPUT # Evita que se cree el Issue
            exit 0
          fi

          # Intentamos formatear. Si jq falla, el siguiente paso mostrar√° el contenido.
          if jq -r '.searchQueries | .[] | "- `" + . + "`"' search_queries.json > formatted_body.md; then
            echo "Contenido formateado con √©xito."
            {
              echo 'QUERIES_BODY<<EOF';
              echo '### ü§ñ Estrategias de B√∫squeda Generadas';
              echo '';
              echo 'Esta es la lista de consultas de b√∫squeda optimizadas generadas por el Estratega. La tarea consiste en ejecutar estas b√∫squedas en Google y analizar los resultados en busca de nuevos eventos.';
              echo '';
              cat formatted_body.md;
              echo 'EOF';
            } >> "$GITHUB_ENV"
            echo "jq_success=true" >> $GITHUB_OUTPUT
          else
            echo "Error de JQ: El contenido de la respuesta de la API probablemente no es un JSON v√°lido."
            echo "jq_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug - Mostrar contenido de la respuesta en caso de error
        if: steps.format_body.outputs.jq_success == 'false'
        run: |
          echo "El paso de formateo no tuvo √©xito. Contenido del fichero 'search_queries.json':"
          cat search_queries.json
          # Decidimos si esto debe ser un fallo. Si el fichero est√° vac√≠o, puede que no sea un error.
          if [ -s search_queries.json ]; then
            exit 1 # Falla solo si hay contenido que no es JSON
          fi


      - name: 3. Crear Issue en GitHub con la lista de consultas
        if: steps.format_body.outputs.jq_success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          ISSUE_TITLE="Estrategias de B√∫squeda de Eventos - $(date +'%Y-%m-%d')"
          gh issue create --title "$ISSUE_TITLE" --body "$QUERIES_BODY" --repo $REPO