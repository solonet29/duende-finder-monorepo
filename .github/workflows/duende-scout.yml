name: Generador de Estrategias de B√∫squeda (Ojeador)

on:
  schedule:
    # Se ejecuta todos los d√≠as a las 5:00 AM UTC
    - cron: '0 5 * * *'
  workflow_dispatch: # Permite ejecutarlo manualmente desde GitHub

jobs:
  generate-search-strategy:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: 1. Llamar al endpoint del Estratega y guardar las consultas
        id: get_queries
        run: |
          # Guardamos la respuesta de la API en un fichero de texto.
          HTTP_CODE=$(curl -s -L -w '%{http_code}' -o search_queries.txt "${{ secrets.VERCEL_URL }}/api/orchestrator")
          echo "C√≥digo de estado HTTP recibido: $HTTP_CODE"

          if [[ "$HTTP_CODE" -lt 200 || "$HTTP_CODE" -ge 300 ]]; then
            echo "curl fall√≥ con el c√≥digo de estado: $HTTP_CODE"
            # Forzamos el fallo del paso para que el workflow se detenga aqu√≠
            exit 1
          fi

      - name: 2. Formatear consultas para el cuerpo del Issue
        id: format_body
        run: |
          # Si el fichero est√° vac√≠o, no hay queries.
          if [ ! -s search_queries.txt ]; then
            echo "El fichero de queries est√° vac√≠o. No se crear√° ning√∫n issue."
            echo "format_success=false" >> $GITHUB_OUTPUT
            exit 0 # Salimos con √©xito, no es un error.
          fi

          # Formateamos cada l√≠nea del fichero de texto a formato Markdown
          while IFS= read -r line || [ -n "$line" ]; do
            # Ignoramos l√≠neas vac√≠as
            if [ -n "$line" ]; then
              echo "- \`$line\`" >> formatted_body.md
            fi
          done < search_queries.txt
          
          # Comprobamos si se gener√≥ alg√∫n contenido
          if [ ! -s formatted_body.md ]; then
            echo "El fichero de queries solo conten√≠a l√≠neas vac√≠as. No se crear√° ning√∫n issue."
            echo "format_success=false" >> $GITHUB_OUTPUT
            exit 0 # Salimos con √©xito, no es un error.
          fi

          echo "Contenido formateado con √©xito."
          {
            echo 'QUERIES_BODY<<EOF';
            echo '### ü§ñ Estrategias de B√∫squeda Generadas';
            echo '';
            echo 'Esta es la lista de consultas de b√∫squeda optimizadas generadas por el Estratega. La tarea consiste en ejecutar estas b√∫squedas en Google y analizar los resultados en busca de nuevos eventos.';
            echo '';
            cat formatted_body.md;
            echo 'EOF';
          } >> "$GITHUB_ENV"
          echo "format_success=true" >> $GITHUB_OUTPUT

      - name: 3. Crear Issue en GitHub con la lista de consultas
        if: steps.format_body.outputs.format_success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          ISSUE_TITLE="Estrategias de B√∫squeda de Eventos - $(date +'%Y-%m-%d')"
          gh issue create --title "$ISSUE_TITLE" --body "$QUERIES_BODY" --repo $REPO
      
      - name: Debug - Mostrar contenido si no se crea issue
        # Se ejecuta si el workflow falla o si el formateo decide no continuar.
        if: failure() || steps.format_body.outputs.format_success == 'false'
        run: |
          echo "Debug: No se cre√≥ ning√∫n issue. Contenido del fichero de respuesta de la API ('search_queries.txt'):"
          # Usamos cat de forma segura por si el fichero no existe
          cat search_queries.txt || echo "El fichero search_queries.txt no existe."