// notify-new-events.js
// OBJETIVO: Enviar una notificaci√≥n push a todos los suscriptores sobre eventos reci√©n creados.

require('dotenv').config();
const { connectToDatabase, closeDatabaseConnection } = require('./lib/database.js');
const webpush = require('../api/lib/webPush.js'); // Reutilizamos la configuraci√≥n de web-push de la API

async function notifyAboutNewEvents() {
    console.log('üöÄ Iniciando script de notificaci√≥n de nuevos eventos...');
    const db = await connectToDatabase();
    
    try {
        // PASO 1: Buscar eventos creados en la √∫ltima hora
        const eventsCollection = db.collection('events');
        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);

        const newEventsCount = await eventsCollection.countDocuments({ 
            contentGenerationDate: { $gte: oneHourAgo },
            status: 'content_ready' // Asegurarnos de que solo contamos los que est√°n listos
        });

        if (newEventsCount === 0) {
            console.log('‚úÖ No se encontraron eventos nuevos en la √∫ltima hora. No se enviar√°n notificaciones.');
            return;
        }

        console.log(`üîç Se encontraron ${newEventsCount} eventos nuevos. Preparando notificaci√≥n...`);

        // PASO 2: Obtener todos los suscriptores
        const subscriptionsCollection = db.collection('push_subscriptions');
        const subscriptions = await subscriptionsCollection.find({}).toArray();

        if (subscriptions.length === 0) {
            console.log('‚úÖ No hay suscriptores a los que notificar.');
            return;
        }

        console.log(`‚ÑπÔ∏è ${subscriptions.length} suscriptores encontrados. Enviando notificaciones...`);

        // PASO 3: Crear el payload y enviar las notificaciones
        const payload = JSON.stringify({
            title: newEventsCount > 1 ? `¬°${newEventsCount} nuevos eventos de flamenco!` : '¬°Un nuevo evento de flamenco te espera!',
            body: 'Pulsa aqu√≠ para descubrir los √∫ltimos espect√°culos a√±adidos.',
            icon: 'https://buscador.afland.es/favicon.png',
            badge: 'https://buscador.afland.es/favicon.png',
            url: 'https://buscador.afland.es/' // URL a la que se redirige al hacer clic
        });

        let successCount = 0;
        let failureCount = 0;

        const notificationPromises = subscriptions.map(async (sub) => {
            try {
                await webpush.sendNotification(sub, payload);
                successCount++;
            } catch (error) {
                failureCount++;
                // Si la suscripci√≥n no es v√°lida (error 410 o 404), la eliminamos
                if (error.statusCode === 410 || error.statusCode === 404) {
                    console.log(`   -> Suscripci√≥n caducada o no v√°lida. Eliminando: ${sub.endpoint.substring(0, 50)}...`);
                    await subscriptionsCollection.deleteOne({ _id: sub._id });
                }
            }
        });

        await Promise.all(notificationPromises);

        console.log(`
üéâ Proceso de env√≠o finalizado.`);
        console.log(`   -> ${successCount} notificaciones enviadas con √©xito.`);
        console.log(`   -> ${failureCount} env√≠os fallidos (y eliminados si procede).`);

    } catch (error) {
        console.error('‚ùå Ha ocurrido un error general en el script de notificaci√≥n:', error);
    } finally {
        await closeDatabaseConnection();
        console.log('‚úÖ Conexi√≥n a la base de datos cerrada.');
    }
}

notifyAboutNewEvents();
